version: v1beta9
images:
  app:
    image: ${APP_IMAGE}
    preferSyncOverRebuild: true
    injectRestartHelper: true
    appendDockerfileInstructions:
    - USER root
    build:
      docker:
        options:
          target: dev
deployments:
- name: mysql
  helm:
    componentChart: false
    chart:
      name: mysql
      version: 8.4.4
      repo: https://charts.bitnami.com/bitnami
    values:
      image:
        tag: $!{DB_MYSQL_VERSION}
      auth:
        rootPassword: $!{DB_ROOT_PASSWORD}
        database: $!{DB_DATABASE}
        username: $!{DB_USERNAME}
        password: $!{DB_PASSWORD}
      primary:
        service:
          port: ${DB_PORT}
- name: nginx-config
  kubectl:
    manifests:
    - deploy/nginx-config-configmap.yaml
- name: app
  helm:
    componentChart: true
    values:
      replicas: 1
      annotations:
        nginx-config-hash: $!{NGINX_CONFIG_HASH}
      containers:
      - name: nginx
        image: nginx:${NGINX_IMAGE_VERSION}
        volumeMounts:
        - containerPath: /etc/nginx/conf.d
          volume:
            name: nginx-config
            readOnly: true
        - containerPath: /assets
          volume:
            name: ${ASSET_VOLUME_NAME}
            readOnly: true
      - name: php
        image: ${APP_IMAGE}
        command:
        - "/bin/sh"
        args:
        - "-c"
        - |
          cp -r /var/www/html/public/* /assets/;
          php-fpm
        env:
        - name: APP_DEBUG
          value: $!{APP_DEBUG}
        - name: APP_KEY
          value: $!{APP_KEY}
        - name: DB_HOST
          value: $!{DB_HOST}
        - name: DB_PORT
          value: $!{DB_PORT}
        - name: DB_USERNAME
          value: $!{DB_USERNAME}
        - name: DB_PASSWORD
          value: $!{DB_PASSWORD}
        - name: REDIS_PASSWORD
          value: $!{REDIS_PASSWORD}
        volumeMounts:
        - containerPath: /assets
          volume:
            name: ${ASSET_VOLUME_NAME}
            readOnly: false
      initContainers:
      - name: php-init
        image: ${APP_IMAGE}
        command:
        - "/bin/sh"
        args:
        - "-c"
        - |
          while ! mysql -h"$DB_HOST" -P"$DB_PORT" -u"$DB_USERNAME" -p"$DB_PASSWORD" >/dev/null 2>&1;
          do
            echo "Waiting for database to start..."
            sleep 3
          done

          php artisan migrate --force --no-interaction
        env:
        - name: DB_HOST
          value: $!{DB_HOST}
        - name: DB_PORT
          value: $!{DB_PORT}
        - name: DB_USERNAME
          value: $!{DB_USERNAME}
        - name: DB_PASSWORD
          value: $!{DB_PASSWORD}
      service:
        ports:
        - port: 80
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ${ASSET_VOLUME_NAME}
        size: ${ASSET_VOLUME_SIZE}
    recreate: true
- name: redis
  helm:
    componentChart: false
    chart:
      name: redis
      version: 12.8.3
      repo: https://charts.bitnami.com/bitnami
    values:
      image:
        tag: ${REDIS_VERSION}
      networkPolicy:
        enabled: true
        allowExternal: true
      password: ${REDIS_PASSWORD}
      cluster:
        enabled: false
dev:
  ports:
  - imageName: app
    forward:
    - port: 8080
      remotePort: 80
  open:
  - url: http://localhost:8080
  sync:
  - imageName: app
    excludePaths:
    - .git/
    - .devspace/
    - storage/logs/
    - README.md
    uploadExcludePaths:
    - Dockerfile
    - devspace.yaml
    - storage/
    - deploy/
    - vendor/
    - node_modules/
    onUpload:
      restartContainer: true
      execRemote:
        onBatch:
          command: sh
          args: ["-c", "cp -r /var/www/html/public/* /assets/"]
  logs:
    showLast: 100
    sync: true
    selectors:
    - containerName: nginx
  autoReload:
    paths:
    - Dockerfile
    - deploy/nginx-config-configmap.yaml
vars:
- name: APP_IMAGE
  question: Which image repository should your image be pushed to? (e.g. dockerhubuser/image, gcr.io/project/image)
- name: DB_PASSWORD
  password: true
- name: DB_ROOT_PASSWORD
  password: true
- name: REDIS_PASSWORD
  password: true
- name: APP_DEBUG
  question: Enable debugging? (true/false)
  default: true
  source: env
- name: NGINX_CONFIG_HASH
  source: command
  command: kubectl
  args: ["get", "configmap", "nginx-config", "-o", "jsonpath={.metadata.resourceVersion}"]
commands:
- name: artisan
  description: Entry point for artisan commands.
  command: devspace enter -c php -- php artisan
- name: composer
  description: Entry point for composer commands.
  command: devspace enter -c php -- composer
- name: php
  description: Entry point for PHP commands.
  command: devspace enter -c php -- php
- name: npm
  description: Entry point for NPM commands.
  command: devspace enter -c php -- npm
- name: update-db-user
  description: Update MySQL DB user/password.
  command: |
    devspace enter --wait -l app.kubernetes.io/name=mysql -- sh -c "
      while ! mysql -h'${DB_HOST}' -P'${DB_PORT}' -u'${DB_USERNAME}' -p'${DB_PASSWORD}' >/dev/null 2>&1;
      do
        echo 'Waiting for database to be ready...';
        sleep 3;
      done;

      echo \"CREATE USER IF NOT EXISTS '${DB_USERNAME}'@'%' IDENTIFIED BY '${DB_PASSWORD}'; ALTER USER '${DB_USERNAME}' IDENTIFIED BY '${DB_PASSWORD}';\" | mysql -u root -p'${DB_ROOT_PASSWORD}'"
- name: generate-key
  description: Generate APP_KEY.
  command: TMP_FILE=.devspace/app_key.tmp && docker run --rm -v $PWD:/app composer/composer bash -c "composer install --no-dev --no-interaction && php artisan key:generate --show >$TMP_FILE" && devspace set var APP_KEY="$(cat $TMP_FILE)" && rm $TMP_FILE
- name: mysql
  description: Enter to MySQL shell.
  command: devspace enter -c mysql -- mysql -h'${DB_HOST}' -P'${DB_PORT}' -u'${DB_USERNAME}' -p'${DB_PASSWORD}' '${DB_DATABASE}'
hooks:
- command: "devspace"
  args: ["run", "update-db-user"]
  when:
    after:
      deployments: mysql
- command: "npm"
  args: ["run", "watch"]
  background: true
  silent: true
  where: 
    container:
      labelSelector:
        app.kubernetes.io/component: "app"
      containerName: php
  when:
    after:
      deployments: all
- command: "sh"
  args: ["-c", "nginx -t && nginx -s reload"]
  where: 
    container:
      labelSelector:
        app.kubernetes.io/component: "app"
      containerName: nginx
  when:
    after:
      deployments: all
profiles:
- name: production
  patches:
  - op: remove
    path: images.app.appendDockerfileInstructions
  - op: remove
    path: images.app.injectRestartHelper
  - op: remove
    path: images.app.build.docker.options.target
  - op: replace
    path: deployments.name=app.helm.values.containers.name=php.env.name=APP_DEBUG.value
    value: "false"
- name: interactive
  patches:
  - op: add
    path: dev.interactive
    value:
      defaultEnabled: true
  - op: replace
    path: deployments.name=app.helm.values.containers.name=php.args
    value:
    - "-c"
    - "sleep 9999999999"
